#!/usr/bin/env ruby

APP_PATH = File.expand_path('../../config/application',  __FILE__)
require File.expand_path('../../config/boot',  __FILE__)
require APP_PATH

# set Rails.env here if desired
Rails.application.require_environment!

require 'gli'
require 'awesome_print'

include GLI::App

program_desc 'command line administration for a pawn parade deployment'

desc 'manage schedules'
long_desc 'The schedule command manipulates named schedules of tournaments, around which leagues are built.'
command :schedule do |schedule|
  schedule.desc 'add a new schedule'
  schedule.long_desc 'add a new named schedule'
  schedule.command :create do |create|
    create.arg_name 'schedule_name'
    create.action do | global_options, options, args |
      raise 'you must specify a schedule_name to create' if args.length < 1
      schedule_name = args[0]
      existing_schedules = Schedule.all( :conditions => {:name => schedule_name} )
      if existing_schedules.length > 0
        ap existing_schedules
        raise "schedule #{existing_schedules[0].name} already exists"
      end
      new_schedule = Schedule.create!( :name => schedule_name)
      $stderr.puts "schedule #{new_schedule.name} created" if new_schedule
    end
  end

  schedule.desc 'list schedules'
  schedule.long_desc 'show the list of existing schedules'
  schedule.command :list do |list|
    schedules = Schedule.order('name').all
    list.action do | global_options, options, args |
      schedules.each do |schedule|
        puts schedule.name
      end
      $stderr.puts "#{schedules.length} schedules found"
    end
  end

  schedule.desc 'show a tournament schedule'
  schedule.long_desc 'show future tournaments for named schedule'
  schedule.command :show do |show|
    show.arg_name 'schedule_name'
    show.action do | global_options, options, args |
      raise 'you must specify a schedule_name to create' if args.length < 1
      schedule_name = args[0]
      schedule = Schedule.find_by_name(schedule_name)
      raise "schedule #{schedule_name} does not exist" if schedule.nil?
      schedule.tournaments.sort_by!{|t| t[:event_date]}.each do |tournament|
        puts "#{tournament.location} #{tournament.event_date}"
      end
      $stderr.puts "#{schedule.tournaments.length} tournaments found"
    end
  end

  schedule.desc 'include a tournament on a schedule'
  schedule.long_desc 'take an already existing tournament, identified by it\'s slug, and add it to a schedule'
  schedule.arg_name 'tournament_slug'
  schedule.command :add do |add|
    add.desc 'schedule to add the tournament to'
    add.arg_name 'SCHEDULE'
    add.flag [:s,:to]
    add.action do | global_options, options, args |
      schedule_name=options[:to]
      slug=args[0]
      raise 'must specify a schedule with -s or --to' if schedule_name.nil?
      to_schedule=Schedule.find_by_name(schedule_name)
      raise "schedule #{schedule_name} does not exist" if to_schedule.nil?
      raise 'must specify a tournament\'s slug' if slug.nil?
      tournament=Tournament.find_by_slug(slug)
      raise "Tournament #{slug} does not exist" if tournament.nil?
      puts "including tournament #{tournament.slug} on schedule #{to_schedule.name}"
      to_schedule.tournaments << tournament
    end
  end



  schedule.action do | global_options, options, args |

  end

end

desc 'manage tournaments'
long_desc 'This command is used to create and manage tournaments.'
command :tournament do |tournament|

  tournament.desc 'add a new tournament'
  tournament.long_desc <<END
Add a new tournament by specifying it's SLUG, LOCATION, and EVENT_DATE, defined as: \n
SLUG - a unique identifier for the tournament fit for use in a URI path  \n
NAME - the title of the tournament, as defined by its hosts \n
LOCATION - general name for where the tournament will occur (not the address) \n
EVENT_DATE - the date on which the event starts, format: "%Y-%m-%d" (eg: 2013-9-14) \n
SHORT_DESCRIPTION - a short (256 character) explanation of the tournament
END
  tournament.arg_name 'SLUG NAME LOCATION EVENT_DATE SHORT_DESCRIPTION'
  tournament.command :create do |create|
    create.action do | global_options, options, args |
      arguments_error_message =
          'you must specify a slug, name, location, event date, and short description to create a tournament'
      raise arguments_error_message if args.length < 5
      slug = args[0].downcase
      raise "Tournament #{slug} already exists." if Tournament.find_by_slug(slug)
      name = args[1]
      location = args[2]
      event_date = Date::strptime(args[3], "%Y-%m-%d")
      short_description = args[4]
      duplicates = Tournament.all(:conditions => {:location => location, :event_date => event_date})
      raise "Tournament duplicates location and event date of tournament #{duplicates[0].slug}." if duplicates.length > 0
      new_tournament = Tournament.create!(
          :slug=>slug,
          :name=>name,
          :location=>location,
          :event_date=>event_date,
          :short_description=>short_description)
      $stderr.puts "tournament #{new_tournament.slug} created" if new_tournament
    end
  end


end

exit run(ARGV)



