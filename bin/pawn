#!/usr/bin/env ruby

APP_PATH = File.expand_path('../../config/application',  __FILE__)
require File.expand_path('../../config/boot',  __FILE__)
require APP_PATH

# set Rails.env here if desired
Rails.application.require_environment!

require 'gli'
require 'awesome_print'

include GLI::App

program_desc 'command line administration for a pawn parade deployment'

desc 'pawn CLI for managing chess league entities'

command :schedule do |schedule|

  desc 'manage schedules'
  long_desc <<END
The schedule command manipulates named schedules of tournaments, around
which leagues are built.
END

  schedule.command :create do |create|
    create.desc 'add a new schedule'
    create.long_desc 'add a new named schedule'
    create.arg_name 'schedule_name'
    create.action do | global_options, options, args |
      raise 'you must specify a schedule_name to create' if args.length < 1
      schedule_name = args[0]
      existing_schedules = Schedule.all( :conditions => {:name => schedule_name} )
      if existing_schedules.length > 0
        ap existing_schedules
        raise "schedule #{existing_schedules[0].name} already exists"
      end
      new_schedule = Schedule.create!( :name => schedule_name)
      $stderr.puts "schedule #{new_schedule.name} created" if new_schedule
    end
  end

  schedule.command :list do |list|
    list.desc 'list schedules'
    list.long_desc 'show the list of existing schedules'
    schedules = Schedule.order('name').all
    list.action do | global_options, options, args |
      schedules.each do |schedule|
        puts schedule.name
      end
      $stderr.puts "#{schedules.length} schedules found"
    end
  end

  schedule.command :show do |show|
    show.desc 'show a tournament schedule'
    show.long_desc 'show future tournaments for named schedule'
    show.arg_name 'schedule_name'
    show.action do | global_options, options, args |
      raise 'you must specify a schedule_name to create' if args.length < 1
      schedule_name = args[0]
      schedule = Schedule.find_by_name(schedule_name)
      raise "schedule #{schedule_name} does not exist" if schedule.nil?
      schedule.tournaments.sort_by!{|t| t[:event_date]}.each do |tournament|
        puts "#{tournament.location} #{tournament.event_date}"
      end
      $stderr.puts "#{schedule.tournaments.length} tournaments found"
    end
  end

  schedule.action do | global_options, options, args |

  end

end

command :tournament do |tournament|

  desc 'manage tournaments'
  long_desc <<END
The tournament command is used to manage tournaments.
END

  tournament.command :create do |create|
    create.desc 'add a new tournament'
    create.long_desc 'add a new tournament'
    create.arg_name 'slug'
    create.arg_name 'location'
    create.arg_name 'event_date'
    create.action do | global_options, options, args |
      arguments_error_message =  'you must specify a slug, location, and event_date to create a tournament'
      raise arguments_error_message if args.length < 3
      slug = args[0].downcase
      raise "Tournament #{slug} already exists." if Tournament.find_by_slug(slug)
      location = args[1]
      event_date = Date::strptime(args[2], "%Y-%m-%d")
      duplicates = Tournament.all(:conditions => {:location => location, :event_date => event_date})
      raise "Tournament duplicates location and event date of tournament #{duplicates[0].slug}." if duplicates.length > 0
      new_tournament = Tournament.create!(:slug=>slug, :location=>location, :event_date=>event_date)
      $stderr.puts "tournament #{new_tournament.slug} created" if new_tournament
    end
  end


end

exit run(ARGV)



